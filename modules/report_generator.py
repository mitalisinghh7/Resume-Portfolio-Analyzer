from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, HRFlowable
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from datetime import datetime

def generate_pdf_report(role, found, missing, feedback, ats_score, portfolio_data=None):

    filename = f"resume_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()

    header_style = ParagraphStyle(
        'Header',
        parent=styles['Heading1'],
        textColor=colors.HexColor("#0A3D62"),
        spaceAfter=10
    )

    subheader_style = ParagraphStyle(
        'Subheader',
        parent=styles['Heading2'],
        textColor=colors.HexColor("#1E3799"),
        spaceBefore=10,
        spaceAfter=6
    )

    normal_style = ParagraphStyle(
        'NormalCustom',
        parent=styles['Normal'],
        fontSize=11,
        leading=16,
        textColor=colors.black
    )

    highlight_style = ParagraphStyle(
        'Highlight',
        parent=styles['Normal'],
        fontSize=11,
        leading=16,
        textColor=colors.HexColor("#006266"),
        leftIndent=12
    )

    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        textColor=colors.grey,
        alignment=1,
        fontSize=9
    )

    content = []

    content.append(Paragraph("Codeunia Resume & Portfolio Analyzer", header_style))
    content.append(HRFlowable(width="100%", color=colors.lightgrey))
    content.append(Spacer(1, 12))

    content.append(Paragraph(f"<b>Selected Role:</b> {role}", normal_style))
    content.append(Spacer(1, 10))

    content.append(Paragraph("Keyword Analysis", subheader_style))
    content.append(Paragraph(f"<b>Found Keywords:</b> {', '.join(found) if found else 'None'}", normal_style))
    content.append(Paragraph(f"<b>Missing Keywords:</b> {', '.join(missing) if missing else 'None'}", normal_style))
    content.append(Spacer(1, 10))

    content.append(Paragraph("Resume Feedback", subheader_style))
    if isinstance(feedback, list):
        for line in feedback:
            content.append(Paragraph(f"• {line}", highlight_style))
    else:
        for line in str(feedback).split("\n"):
            line = line.strip()
            if line:
                content.append(Paragraph(f"• {line}", highlight_style))
    content.append(Spacer(1, 10))

    content.append(Paragraph("ATS Score", subheader_style))
    content.append(Paragraph(f"Your resume scored <b>{ats_score}/100</b> for the role: <b>{role}</b>", normal_style))
    content.append(Spacer(1, 20))

    if portfolio_data:
        content.append(HRFlowable(width="100%", color=colors.lightgrey))
        content.append(Spacer(1, 10))
        content.append(Paragraph("Portfolio Summary (GitHub)", subheader_style))

        username = portfolio_data.get("username", "N/A")
        repos = portfolio_data.get("repositories", "N/A")
        followers = portfolio_data.get("followers", "N/A")
        contributions = portfolio_data.get("contributions", "N/A")

        content.append(Paragraph(f"<b>GitHub Username:</b> {username}", normal_style))
        content.append(Paragraph(f"<b>Repositories:</b> {repos}", normal_style))
        content.append(Paragraph(f"<b>Followers:</b> {followers}", normal_style))
        content.append(Paragraph(f"<b>Contributions (this year):</b> {contributions}", normal_style))
        content.append(Spacer(1, 20))

    content.append(HRFlowable(width="100%", color=colors.lightgrey))
    content.append(Spacer(1, 6))
    content.append(Paragraph("Generated by Codeunia Resume & Portfolio Analyzer", footer_style))

    doc.build(content)
    return filename